{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"hi","title":"Home"},{"location":"test/","text":"Setting Up Your Computer Before we do any coding in Java, we will have to download some important stuff. Here is where you can download Java Follow the instructions listed and get the Java Runtime Environment or JRE downloaded. Next, I like to code in a code editor called Eclipse and you can download that here","title":"Test"},{"location":"test/#setting-up-your-computer","text":"Before we do any coding in Java, we will have to download some important stuff. Here is where you can download Java Follow the instructions listed and get the Java Runtime Environment or JRE downloaded. Next, I like to code in a code editor called Eclipse and you can download that here","title":"Setting Up Your Computer"},{"location":"course/conditionals/","text":"Basic Conditionals If Statement int a = 1; if(a == 1) { System.out.println(\"a equals 1\"); } This is an if statement. The part inside the parenthesis should return either true or false. If it is true, then whatever is inside the if statement will run. If not, then those lines of code will be skipped. In this case, the == is used to check if something is equal to something else. If the variable a holds the value 1, then the conditional will return true and the code inside the if statement will run. int a = 5; if(a == 1) { System.out.println(\"a equals 1\"); } else { System.out.println(\"a does not equal 1\"); } This extra part is an else statement. It must always come after an if statement, and will run if the if statement is false. It will not run if the if statement is correct. int a = 5; if(a == 1) { System.out.println(\"a equals 1\"); } else if(a == 5) { System.out.println(\"a equals 5\"); } else { System.out.println(\"a does not equal 1\"); } There is one more thing called an else if statement. This will run after an if statement and will serve as an extra condition the computer will check. You can chain together as many else if statements as you want as long as they are all after an if statement.","title":"Conditionals"},{"location":"course/conditionals/#basic-conditionals","text":"","title":"Basic Conditionals"},{"location":"course/conditionals/#if-statement","text":"int a = 1; if(a == 1) { System.out.println(\"a equals 1\"); } This is an if statement. The part inside the parenthesis should return either true or false. If it is true, then whatever is inside the if statement will run. If not, then those lines of code will be skipped. In this case, the == is used to check if something is equal to something else. If the variable a holds the value 1, then the conditional will return true and the code inside the if statement will run. int a = 5; if(a == 1) { System.out.println(\"a equals 1\"); } else { System.out.println(\"a does not equal 1\"); } This extra part is an else statement. It must always come after an if statement, and will run if the if statement is false. It will not run if the if statement is correct. int a = 5; if(a == 1) { System.out.println(\"a equals 1\"); } else if(a == 5) { System.out.println(\"a equals 5\"); } else { System.out.println(\"a does not equal 1\"); } There is one more thing called an else if statement. This will run after an if statement and will serve as an extra condition the computer will check. You can chain together as many else if statements as you want as long as they are all after an if statement.","title":"If Statement"},{"location":"course/introduction/","text":"Hello World! Your First Class public class Class { public static void main(String[] args) { System.out.println(\"Hello World!\"); } } While this may look complex, we don't need to worry about many of these parts right now. public class Class { This line creates a class called Class (I'm really creative with names as you can tell). Whenever you want to run code in Java, it will have to be in a class. If you want to create a file, the file should have the same name as the file (in this case Class.java ). There's a bit more to it but that's all you really need to know for class syntax right now. I'll quickly go over what each keyword does but you don't have to memorize them just yet: - public means anybody and any other class/function can access this - class means this is a class Oh yeah. One more thing. Notice how you need to have brackets (these things: {}) when you're making a class and a method. That is important for Java, and a difference from other languages like Python. public static void main(String[] args) { This next line creates a method called main , which will be the function that runs first whenever you run the program. * public one more time, this means that anybody can access this function * static means you can run this without instantiating the class (again you don't need to know this right now) - void means this function does not return any value - main means this is the main method, and it is also the name of the method - String[] args is the arguments so that you can pass in different values to this method System.out.println(\"Hello World!\"); This is Java's way of printing out something (in this case, the string \"Hello World!\") Woohoo congrats on creating your first class!","title":"Hello World"},{"location":"course/introduction/#hello-world","text":"","title":"Hello World!"},{"location":"course/introduction/#your-first-class","text":"public class Class { public static void main(String[] args) { System.out.println(\"Hello World!\"); } } While this may look complex, we don't need to worry about many of these parts right now. public class Class { This line creates a class called Class (I'm really creative with names as you can tell). Whenever you want to run code in Java, it will have to be in a class. If you want to create a file, the file should have the same name as the file (in this case Class.java ). There's a bit more to it but that's all you really need to know for class syntax right now. I'll quickly go over what each keyword does but you don't have to memorize them just yet: - public means anybody and any other class/function can access this - class means this is a class Oh yeah. One more thing. Notice how you need to have brackets (these things: {}) when you're making a class and a method. That is important for Java, and a difference from other languages like Python. public static void main(String[] args) { This next line creates a method called main , which will be the function that runs first whenever you run the program. * public one more time, this means that anybody can access this function * static means you can run this without instantiating the class (again you don't need to know this right now) - void means this function does not return any value - main means this is the main method, and it is also the name of the method - String[] args is the arguments so that you can pass in different values to this method System.out.println(\"Hello World!\"); This is Java's way of printing out something (in this case, the string \"Hello World!\") Woohoo congrats on creating your first class!","title":"Your First Class"},{"location":"course/java/","text":"Introduction to Java hello hi world int i = 0;","title":"Introduction to Java"},{"location":"course/java/#introduction-to-java","text":"","title":"Introduction to Java"},{"location":"course/java/#hello","text":"hi","title":"hello"},{"location":"course/java/#world","text":"int i = 0;","title":"world"},{"location":"course/loops/","text":"yo so basically this is a loop: for(int i = 0; i < 5; i++) { System.out.println(\"Dababy\"); }","title":"Loops"},{"location":"course/vars/","text":"Java Variables Primitive Data Types Compared to other languages like Python, with Java, you will have to define a variable's type before you can use it. int integer_var; //whole numbers integer_var = 1; int is a value of a variable, and it holds whole numbers (0, 6, -4, etc) In this case, the \"=\" assigns a value. Whatever variable on the left of it, in this case integer_val , will be assigned the value 1. double double_var = 4.3; //decimal numbers float float_var = 4.5f; //also decimal numbers Another type of variable, double holds decimal numbers (7.0, 3.14, -5.489, etc) There is also a variable similar to doubles called float which also holds decimals. If that is the case, what is the difference then? A double can hold larger values or hold more decimal places of accuracy than a float can. boolean boolean_var = true; //true or false Yet another type of variable, boolean holds true/false values. It can only hold a true, or a false, nothing else. char character_var = 'a'; //holds a single character, in this case, the character 'a' char character_var2 = 97; //interestingly, the value 97 also is the character 'a' Another type of variable, char is a single character. It uses ASCII values , which also means that you can use a number to get a character. Not Primitives ;) Spoiler alert, I'm only going to talk about Strings here. So, String string_var = \"The Atlanta Falcons blew a 28-3 lead in the Super Bowl.\"; //holds a lot of characters This String is basically a lot of characters linked together. Notice how you use double quotes (\") for strings and single quotes (') for characters. Pop Quiz How do you create a variable to hold the number 4? int v = 4; //whole numbers","title":"Variables"},{"location":"course/vars/#java-variables","text":"","title":"Java Variables"},{"location":"course/vars/#primitive-data-types","text":"Compared to other languages like Python, with Java, you will have to define a variable's type before you can use it. int integer_var; //whole numbers integer_var = 1; int is a value of a variable, and it holds whole numbers (0, 6, -4, etc) In this case, the \"=\" assigns a value. Whatever variable on the left of it, in this case integer_val , will be assigned the value 1. double double_var = 4.3; //decimal numbers float float_var = 4.5f; //also decimal numbers Another type of variable, double holds decimal numbers (7.0, 3.14, -5.489, etc) There is also a variable similar to doubles called float which also holds decimals. If that is the case, what is the difference then? A double can hold larger values or hold more decimal places of accuracy than a float can. boolean boolean_var = true; //true or false Yet another type of variable, boolean holds true/false values. It can only hold a true, or a false, nothing else. char character_var = 'a'; //holds a single character, in this case, the character 'a' char character_var2 = 97; //interestingly, the value 97 also is the character 'a' Another type of variable, char is a single character. It uses ASCII values , which also means that you can use a number to get a character.","title":"Primitive Data Types"},{"location":"course/vars/#not-primitives","text":"Spoiler alert, I'm only going to talk about Strings here. So, String string_var = \"The Atlanta Falcons blew a 28-3 lead in the Super Bowl.\"; //holds a lot of characters This String is basically a lot of characters linked together. Notice how you use double quotes (\") for strings and single quotes (') for characters.","title":"Not Primitives ;)"},{"location":"course/vars/#pop-quiz","text":"How do you create a variable to hold the number 4? int v = 4; //whole numbers","title":"Pop Quiz"}]}